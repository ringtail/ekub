#!/usr/bin/env escript

main([FileName]) -> format(read(FileName)).

format(Map) ->
    Replacements = [
        {"_ =>", " -> case Action of"},
        {"=>", "->"},
        {"#{", "  "},
        {"},", "};"},
        {"}};\n", "}\n  end;\n"},
        {"}}}\n", "}\n  end\n"},
        {"{namespace}", "~s"},
        {"{name}", "~s"}
    ],
    io:format(lists:foldl(fun({SearchPattern, Replacement}, String) ->
        string:replace(String, SearchPattern, Replacement, all)
    end, lists:flatten(io_lib:format("~p~n", [Map])), Replacements)).

read(FileName) ->
    {ok, Binary} = file:read_file(FileName),
    read(string:split(Binary, "\n", all), #{}).

read([<<"--">>, <<"--">>, Action, <<"kubectl", _Misc/binary>>, Description,
      <<"">>, <<"HTTP Request">>, MethodPath|Rest], Api)
->
    read(Rest, update(Action, Description, MethodPath, Api));

read([<<"--">>, <<"--">>, _Misc, Action, Description,
      <<"">>, <<"HTTP Request">>, MethodPath|Rest], Api)
->
    read(Rest, update(Action, Description, MethodPath, Api));

read([_H|T], Api) -> read(T, Api);
read([], Api) -> Api.

update(Action, Description, MethodPath, Api) ->
    [ObjectBin|_] = lists:reverse(string:split(Description, " ", all)),
    Object = binary_to_atom(string:lowercase(<<ObjectBin/binary, "_">>), utf8),
    [Method, Path] = string:split(MethodPath, " "),

    Resource = {method(Method), binary_to_list(Path)},

    ObjectInfo = maps:get(Object, Api, #{}),
    ObjectInfoNew = maps:put(action(Action), Resource, ObjectInfo),

    maps:put(Object, ObjectInfoNew, Api).

action(Action) ->
    ActionWords = string:split(Action, " ", all),
    list_to_atom(string:lowercase(lists:join("_", ActionWords))).

method(Method) ->
    binary_to_atom(string:lowercase(Method), utf8).
